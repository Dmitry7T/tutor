import asyncio
from create_bot import bot
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.chat_action import ChatActionSender
import re
from aiogram.fsm.state import State, StatesGroup

from keyboards.inline_kbs import check_data

def extract_number(text):
    match = re.search(r'\b(\d+)\b', text)
    if match:
        return int(match.group(1))
    else:
        return None

      
class Form(StatesGroup):
    name = State()
    grade = State()
    direction = State()
    check_state = State()

    
questionnaire_router = Router()


@questionnaire_router.message(F.text == 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É')
async def start_questionnaire_process(message: Message, state: FSMContext):
    await message.answer('–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
    await state.set_state(Form.name)

    
@questionnaire_router.message(F.text, Form.name)
async def capture_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–°—É–ø–µ—Ä! –í –∫–∞–∫–æ–º —Ç—ã –∫–ª–∞—Å—Å–µ?')
    await state.set_state(Form.grade)

    
@questionnaire_router.message(F.text, Form.grade)
async def capture_age(message: Message, state: FSMContext):
    check_grade = extract_number(message.text)

    if not check_grade or not (1 <= check_grade <= 11):
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 11).')
        return
    await state.update_data(grade=check_grade)
    await message.answer('–ö–ª–∞—Å—Å! –£–∫–∞–∂–∏—Ç–µ —á–µ–º —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è:')
    await state.set_state(Form.direction)


@questionnaire_router.message(F.text, Form.direction)
async def capture_direction(message: Message, state: FSMContext):
    await state.update_data(direction=message.text)
    data = await state.get_data()
    await message.answer(f'{data.get("name")}\n—É—á–µ–Ω–∏–∫/—É—á–µ–Ω–∏—Ü–∞ {data.get("grade")} –∫–ª–∞—Å—Å–∞\n–†–µ—à–∏–ª(–∞) –∏–∑—É—á–∞—Ç—å: {data.get("direction")}', reply_markup=check_data()) 

    await state.set_state(Form.check_state)


@questionnaire_router.callback_query(F.data == 'correct', Form.check_state)
async def start_questionnaire_process(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if(callback.from_user.username):
        msg_text = (f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username} –∂–¥–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!\n–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–∞–∫: <b>{data.get("name")}</b>\n{data.get("grade")} –∫–ª–∞—Å—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get("direction")}')
    else:
        user_link = f"tg://user?id={callback.from_user.id}"
        msg_text = (f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_link} –∂–¥–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!\n–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–∞–∫: <b>{data.get("name")}</b>\n{data.get("grade")} –∫–ª–∞—Å—Å\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data.get("direction")}')

    try:  
        await bot.send_message(1953572824, msg_text) 
        await callback.message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–µ–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –≤–∞–º –Ω–∞–ø–∏—à—É—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
    except:  
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞! –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–µ—Å—Ç—Ä–∞—Ç–æ—Ä—É: @migifex')
    await state.clear()


@questionnaire_router.callback_query(F.data == 'incorrect', Form.check_state)
async def start_questionnaire_process(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É —Å –Ω–∞—á–∞–ª–∞:')
    await callback.message.answer('–ö–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
    await state.set_state(Form.name)
